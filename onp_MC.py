import numpy as np
from warehouse import WarehouseAgent
from copy import deepcopy
import matplotlib.pyplot as plt


## Constants ##
eps = 0.8 ## Exploration rate

## Initialize Q_table ##

poss_action = {
            (1, 1): ('down', 'right'),
            (1, 2): ('left', 'down'),
            (2, 1): ('up', 'down', 'right'),
            (2, 2): ('up', 'left', 'down'),
            (3, 1): ('up', 'left', 'down'),
            (3, 2): ('up', 'left', 'down', 'right'),
            (3, 3): ('left', 'down', 'right'),
            (3, 4): ('left', 'down'),
            (4, 1): ('up', 'down', 'right'),
            (4, 2): ('up', 'left', 'down', 'right'),
            (4, 3): ('up', 'left', 'right'),
            (4, 4): ('up', 'left'),
            (5, 1): ('up', 'right'),
            (5, 2): ('up', 'left')
        }

def init_Q_table(poss_action): ## Initializes Q_table
    Q_table = {}
    for i in poss_action:
        for j in poss_action[i]:
            Q_table[(i[0],i[1],j)] = [0, 0] ## [Q-value, Q updates]

    return Q_table

def choose_action(agent_pos,Q_table): ## Input state, Output action ##
    x = agent_pos[0]
    y = agent_pos[1]

    if eps > np.random.rand():
        rew = []
        for i in poss_action[(x,y)]:
            rew.append(Q_table[(x,y,i)][0])
        ind_action = np.argmax(np.array(rew))

        return poss_action[(x,y)][ind_action]
    else:
        return np.random.choice(poss_action[(x,y)])

def gen_episode(wh_agent, Q_table): ## Generates a sequence of states and actions ##
    done = False
    episode_seq = []
    step = 0
    step_limit = 50

    while(not done and step < step_limit):
        #print('hell')
        agent_pos = deepcopy(wh_agent.agent_position)
        action = choose_action(agent_pos,Q_table)
        #episode_seq.append((agent_pos,action))
        reward,done = wh_agent.step(action)
        step += 1
        #if step == step_limit:
            #    reward = -5
        episode_seq.append((agent_pos,action,reward))

    return episode_seq


def on_policy_MC(wh_agent,Q_table): ## On-Policy Monte Carlo function ##
    Q_table = init_Q_table(poss_action)
    avg_return = []
    
    for i in range(100000):
        episode_seq = gen_episode(wh_agent, Q_table)
        returns = 0

        for index_sa in episode_seq:
            #returns += index_sa[2]*0.4
            returns = returns*1 + index_sa[2]
            #print(index_sa)
            key = (index_sa[0][0],index_sa[0][1],index_sa[1])
            Q_table[key][0] = (Q_table[key][0]*Q_table[key][1] + returns)/(Q_table[key][1] + 1)
            Q_table[key][1] += 1
        print(i,'return is ', returns)
        avg_return.append(returns)
        wh_agent.render()
        wh_agent.reset()
    x = np.arange(0,len(avg_return),1)
    plt.plot(x,avg_return)
    return Q_table
        
w = WarehouseAgent()
Q_table = init_Q_table(poss_action)
#print(Q_table)
#print(choose_action(w.agent_position,Q_table))
#print(gen_episode(w,Q_table))
print(on_policy_MC(w,Q_table))
plt.show()


Q_t = {(1, 1, 'down'): [-1.9840817371299082, 27003], (1, 1, 'right'): [-1.974898217151567, 117089], (1, 2, 'left'): [-1.8210927469865676, 36259], (1, 2, 'down'): [-1.8052456326593214, 236254], (2, 1, 'up'): [-1.9976726148633848, 107833], (2, 1, 'down'): [-1.997778576886589, 188078], (2, 1, 'right'): [-1.997366648871672, 892308], (2, 2, 'up'): [-1.9804614643060428, 105425], (2, 2, 'left'): [-1.9800142258830074, 101786], (2, 2, 'down'): [-1.9796150267791994, 1001567], (3, 1, 'up'): [-1.9966274020072037, 1059405], (3, 1, 'left'): [-1.9976961189623224, 293519], (3, 1, 'down'): [-4.924561313095267, 123582], (3, 2, 'up'): [-1.9917645763660659, 80241], (3, 2, 'left'): [-1.991696693335823, 985110], (3, 2, 'down'): [-2.035816968976404, 78421], (3, 2, 'right'): [-1.991722158767502, 109452], (3, 3, 'left'): [-1.9982459908106411, 20883], (3, 3, 'down'): [-1.9981754333286734, 21885], (3, 3, 'right'): [-1.9979951190201979, 205679], (3, 4, 'left'): [-1.9997319383519305, 116833], (3, 4, 'down'): [-1.9997188522637546, 799965], (4, 1, 'up'): [-1.9981239332341485, 9799], (4, 1, 'down'): [-1.9981477728706007, 10433], (4, 1, 'right'): [-1.9980238248474027, 90448], (4, 2, 'up'): [-1.9985185498658735, 230774], (4, 2, 'left'): [-1.998678238083675, 18928], (4, 2, 'down'): [-1.9985320363132388, 20433], (4, 2, 'right'): [-7.1141077336152465, 18041], (4, 3, 'up'): [-1.9999497464215368, 11868], (4, 3, 'left'): [-1.999946115363113, 97381], (4, 3, 'right'): [-1.9999515523945859, 11972], (4, 4, 'up'): [-1.9998592476421035, 711119], (4, 4, 'left'): [-1.999874501521026, 100818], (5, 1, 'up'): [4.180908556104695, 17850], (5, 1, 'right'): [-1.9992876938417534, 2499], (5, 2, 'up'): [-1.999291932692497, 13016], (5, 2, 'left'): [-1.9993272213114115, 9916]}

#Q_t = {(1, 1, 'down'): [-1.970303290901428, 11659], (1, 1, 'right'): [-1.9135537513643956, 28660], (1, 2, 'left'): [-1.6757721579705007, 17107], (1, 2, 'down'): [-1.587879428812483, 95929], (2, 1, 'up'): [-1.995648753189939, 23212], (2, 1, 'down'): [-1.9948322896419144, 19339], (2, 1, 'right'): [-1.994538103538483, 186173], (2, 2, 'up'): [-1.9592476388284148, 41377], (2, 2, 'left'): [-1.9551240776093892, 38906], (2, 2, 'down'): [-1.9540611506295722, 374073], (3, 1, 'up'): [-1.9980712937781546, 178056], (3, 1, 'left'): [-1.9986968791350501, 27999], (3, 1, 'down'): [-6.444595352987759, 18883], (3, 2, 'up'): [-1.9962746755509906, 172361], (3, 2, 'left'): [-1.9960757912348353, 174791], (3, 2, 'down'): [-3.6299414632476457, 167091], (3, 2, 'right'): [-1.9960117404708504, 2149605], (3, 3, 'left'): [-1.998218552689208, 2121556], (3, 3, 'down'): [-1.9982844353723674, 214105], (3, 3, 'right'): [-1.9982591002046952, 219596], (3, 4, 'left'): [-1.9993558045668436, 57623], (3, 4, 'down'): [-1.999166113135072, 190730], (4, 1, 'up'): [-1.9989751921074033, 2809], (4, 1, 'down'): [-1.9985342785860558, 1767], (4, 1, 'right'): [-1.9983641174643543, 14892], (4, 2, 'up'): [-1.9982916550104097, 168220], (4, 2, 'left'): [-1.9982948218053018, 13907], (4, 2, 'down'): [-1.9983840221167315, 13952], (4, 2, 'right'): [-5.550206567810873, 13019], (4, 3, 'up'): [-1.999891986807463, 279503], (4, 3, 'left'): [-1.9999134087107293, 36444], (4, 3, 'right'): [-1.9998970642397946, 29853], (4, 4, 'up'): [-1.999650839832025, 28757], (4, 4, 'left'): [-1.9996297723325547, 191826], (5, 1, 'up'): [8.58826932185123, 6564], (5, 1, 'right'): [-1.999482459550873, 908], (5, 2, 'up'): [-1.9993054676026758, 9155], (5, 2, 'left'): [-1.9990973565328538, 5705]}

#Q_t = {(1, 1, 'down'): [-2.597826478792741, 13612], (1, 1, 'right'): [-4.1595453628147805, 6047], (1, 2, 'left'): [-1.5545433446310397, 12313], (1, 2, 'down'): [-1.352888538809857, 104396], (2, 1, 'up'): [-4.350309245580899, 7391], (2, 1, 'down'): [-3.989955833344196, 4031], (2, 1, 'right'): [-3.810368581403949, 43053], (2, 2, 'up'): [-2.7992555131393564, 10852], (2, 2, 'left'): [-2.7374959407657506, 10403], (2, 2, 'down'): [-2.6906726332467112, 133583], (3, 1, 'up'): [-4.390658344982923, 30981], (3, 1, 'left'): [-4.443106817335225, 2694], (3, 1, 'down'): [-4.54927271289877, 2760], (3, 2, 'up'): [-3.2943905831382927, 7576], (3, 2, 'left'): [-3.420695896872985, 8568], (3, 2, 'down'): [-4.053953317450209, 23314], (3, 2, 'right'): [-3.100782281486424, 111464], (3, 3, 'left'): [-3.665622008698136, 9772], (3, 3, 'down'): [-3.6241319912924657, 9571], (3, 3, 'right'): [-3.6202717188180213, 122595], (3, 4, 'left'): [-3.9446659443758265, 13649], (3, 4, 'down'): [-3.9392006706718425, 122286], (4, 1, 'up'): [-4.612410738333119, 21349], (4, 1, 'down'): [-4.646454548073235, 1836], (4, 1, 'right'): [-4.647561124121898, 2101], (4, 2, 'up'): [-4.478955663637918, 7995], (4, 2, 'left'): [-4.482020752812315, 8126], (4, 2, 'down'): [-4.469808980819238, 130324], (4, 2, 'right'): [-6.233158697606526, 7832], (4, 3, 'up'): [-4.35873399509471, 8391], (4, 3, 'left'): [-4.354528264218736, 108075], (4, 3, 'right'): [-4.355824306764772, 8493], (4, 4, 'up'): [-4.176368033482676, 13366], (4, 4, 'left'): [-4.172566352039171, 117405], (5, 1, 'up'): [78.01917302840944, 116870], (5, 1, 'right'): [-4.671658630352235, 13111], (5, 2, 'up'): [-4.59002525493818, 14710], (5, 2, 'left'): [-4.589244803136633, 128277]}

#Q_t = {(1, 1, 'down'): [-3.0601777450771737, 103294], (1, 1, 'right'): [-6.434659934659919, 13468], (1, 2, 'left'): [-1.8165997572588886, 107110], (1, 2, 'down'): [-5.8805931822558835, 15577], (2, 1, 'up'): [-9.52633212622865, 9665], (2, 1, 'down'): [-10.911080711354355, 10965], (2, 1, 'right'): [-7.556928577657687, 114670], (2, 2, 'up'): [-9.004268487888162, 9371], (2, 2, 'left'): [-18.09598278335737, 20910], (2, 2, 'down'): [-6.979006863140879, 108988], (3, 1, 'up'): [-24.097750718755293, 11826], (3, 1, 'left'): [-23.220783847981046, 8420], (3, 1, 'down'): [-22.810159490564683, 102702], (3, 2, 'up'): [-14.586646334821902, 9181], (3, 2, 'left'): [-16.885577342047863, 22950], (3, 2, 'down'): [-14.555603693181862, 140800], (3, 2, 'right'): [-14.570385482658644, 9313], (3, 3, 'left'): [-15.814774696707127, 9232], (3, 3, 'down'): [-16.651832460733008, 764], (3, 3, 'right'): [-17.179523141654983, 713], (3, 4, 'left'): [-21.032258064516125, 124], (3, 4, 'down'): [-17.866859623733713, 691], (4, 1, 'up'): [-24.914418799521975, 81151], (4, 1, 'down'): [-24.953517510017008, 80611], (4, 1, 'right'): [-24.907853369796452, 1036294], (4, 2, 'up'): [-24.722200333383864, 65990], (4, 2, 'left'): [-24.595567578218912, 1045433], (4, 2, 'down'): [-24.6740799745102, 62770], (4, 2, 'right'): [-223.60689432469547, 61935], (4, 3, 'up'): [-20.003502626970246, 571], (4, 3, 'left'): [-21.73134328358209, 67], (4, 3, 'right'): [-23.857723577235774, 246], (4, 4, 'up'): [-21.5929203539823, 113], (4, 4, 'left'): [-20.056234718826442, 818], (5, 1, 'up'): [-25.91739348370925, 79800], (5, 1, 'right'): [-26.052306283621395, 8737], (5, 2, 'up'): [-25.192771866078377, 61648], (5, 2, 'left'): [-25.522234472620365, 8163]}

count = 0
for i in range(10000):
    #gen_episode(w,Q_t)
    #w.render()
    print(i)
    if gen_episode(w,Q_t)[-1][2] == 200:
        #w.render()
        count += 1
    w.reset()

print(count,count/10000*100)
#print(gen_episode(w,Q_t))



